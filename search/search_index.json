{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Onepanel \u00b6","title":"About Onepanel"},{"location":"#welcome-to-onepanel","text":"","title":"Welcome to Onepanel"},{"location":"cli/","text":"","title":"Overview"},{"location":"integrations/access-tokens/","text":"Create access token \u00b6 You can create an access token by following the steps shown below:","title":"Access Tokens"},{"location":"integrations/access-tokens/#create-access-token","text":"You can create an access token by following the steps shown below:","title":"Create access token"},{"location":"machine-types/","text":"Machine CPU Memory GPU cpu-2-8 2 8GB See pricing","title":"List of Machine Types"},{"location":"projects/","text":"","title":"Overview"},{"location":"sdk/","text":"","title":"Overview"},{"location":"start/cli/","text":"Installation \u00b6 Onepanel CLI is available on pypi and works on Windows, MacOS and Linux. To install Onepanel's CLI via pip : pip install -U onepanel Note CLI is pre-installed if you are using Onepanel Workspaces or Jobs. Tip The CLI is compatible with Python 2.7.x and Python >= 3.6.x, if you have both versions installed, you will need to use pip3 for Python >= 3.6.x. Authentication \u00b6 You can connect your Onepanel account to CLI by using the login command where you'll be prompted for your email and password: onepanel login Alternatively, you can create an access token and then login as follows: onepanel login -t <access-token> Check version \u00b6 onepanel --version Help and documentation \u00b6 You can add --help to any command to view information about its syntax and options, some examples: onepanel jobs --help onepanel jobs create --help","title":"Onepanel CLI"},{"location":"start/cli/#installation","text":"Onepanel CLI is available on pypi and works on Windows, MacOS and Linux. To install Onepanel's CLI via pip : pip install -U onepanel Note CLI is pre-installed if you are using Onepanel Workspaces or Jobs. Tip The CLI is compatible with Python 2.7.x and Python >= 3.6.x, if you have both versions installed, you will need to use pip3 for Python >= 3.6.x.","title":"Installation"},{"location":"start/cli/#authentication","text":"You can connect your Onepanel account to CLI by using the login command where you'll be prompted for your email and password: onepanel login Alternatively, you can create an access token and then login as follows: onepanel login -t <access-token>","title":"Authentication"},{"location":"start/cli/#check-version","text":"onepanel --version","title":"Check version"},{"location":"start/cli/#help-and-documentation","text":"You can add --help to any command to view information about its syntax and options, some examples: onepanel jobs --help onepanel jobs create --help","title":"Help and documentation"},{"location":"start/core-concepts/","text":"Projects \u00b6 A Onepanel Project is a collection of your code repostitories, workspaces and jobs that you can share and collaborate on with your teammates. Your projects can also be forked by team members or made public so that others in the Onepanel community can view and fork them. Workspaces \u00b6 Workspaces are full Linux computing environments that come pre-installed with all the tools you need to explore data and build and experiment with your models. They include Python, JupyterLab, TensorFlow, PyTorch and other well known deep learning libraries and tools, as well as full terminal access. You can optionally install custom packages and dependencies into your workspaces. A single workspace can be paused and resumed at any time or be upgraded to multiple GPUs and downgraded with ease. Jobs \u00b6 Jobs allow you to execute your code in parallel, on multiple dedicated machines which are fully managed by Onepanel. With jobs, you can try different hyper-parameters, code and datasets and then compare the results and metrics for each job and continue iterating on the best results. While a job is running, you can view running logs, system metrics and training metrics. You also have full TensorBoard and terminal access to each running job. Once a job completes, a snapshot of logs, code, commands, datasets, environments and output is automatically saved. This allows you to share your results with others and reproduce/re-run the same experiments at a later time. Datasets \u00b6 With Onepanel Datasets , you can search or create version controlled datasets which you can then mount into a job or workspace . It is ideal to separate your data from your code from your data so you can collaborate with others and try different code on the same underlying dataset. Environments \u00b6 Onepanel Environments are CPU/GPU optimized and are pre-configured with all tools you need to build deep learning models, annotate your images and much more. They can be further customized with additional packages and dependencies .","title":"Core Concepts"},{"location":"start/core-concepts/#projects","text":"A Onepanel Project is a collection of your code repostitories, workspaces and jobs that you can share and collaborate on with your teammates. Your projects can also be forked by team members or made public so that others in the Onepanel community can view and fork them.","title":"Projects"},{"location":"start/core-concepts/#workspaces","text":"Workspaces are full Linux computing environments that come pre-installed with all the tools you need to explore data and build and experiment with your models. They include Python, JupyterLab, TensorFlow, PyTorch and other well known deep learning libraries and tools, as well as full terminal access. You can optionally install custom packages and dependencies into your workspaces. A single workspace can be paused and resumed at any time or be upgraded to multiple GPUs and downgraded with ease.","title":"Workspaces"},{"location":"start/core-concepts/#jobs","text":"Jobs allow you to execute your code in parallel, on multiple dedicated machines which are fully managed by Onepanel. With jobs, you can try different hyper-parameters, code and datasets and then compare the results and metrics for each job and continue iterating on the best results. While a job is running, you can view running logs, system metrics and training metrics. You also have full TensorBoard and terminal access to each running job. Once a job completes, a snapshot of logs, code, commands, datasets, environments and output is automatically saved. This allows you to share your results with others and reproduce/re-run the same experiments at a later time.","title":"Jobs"},{"location":"start/core-concepts/#datasets","text":"With Onepanel Datasets , you can search or create version controlled datasets which you can then mount into a job or workspace . It is ideal to separate your data from your code from your data so you can collaborate with others and try different code on the same underlying dataset.","title":"Datasets"},{"location":"start/core-concepts/#environments","text":"Onepanel Environments are CPU/GPU optimized and are pre-configured with all tools you need to build deep learning models, annotate your images and much more. They can be further customized with additional packages and dependencies .","title":"Environments"},{"location":"start/sdk/","text":"Installation \u00b6 Onepanel SDK is available as soon as you install Onepanel CLI Note SDK is pre-installed if you are using Onepanel Workspaces or Jobs. Authentication \u00b6 The recommended way to authenticate in Onepanel's SDK is to use an access token, you can create an access token and authenticate in the SDK as follows: from onepanel.sdk import Client # with username/access_token client = Client ( username = '<username>' , access_token = '<access token>' ) # or with email/access_token client = Client ( email = '<email>' , access_token = '<access token>' ) Examples \u00b6","title":"Onepanel SDK"},{"location":"start/sdk/#installation","text":"Onepanel SDK is available as soon as you install Onepanel CLI Note SDK is pre-installed if you are using Onepanel Workspaces or Jobs.","title":"Installation"},{"location":"start/sdk/#authentication","text":"The recommended way to authenticate in Onepanel's SDK is to use an access token, you can create an access token and authenticate in the SDK as follows: from onepanel.sdk import Client # with username/access_token client = Client ( username = '<username>' , access_token = '<access token>' ) # or with email/access_token client = Client ( email = '<email>' , access_token = '<access token>' )","title":"Authentication"},{"location":"start/sdk/#examples","text":"","title":"Examples"}]}